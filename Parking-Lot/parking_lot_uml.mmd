classDiagram
    %% Design Patterns
    class ParkingLot {
        -instance: ParkingLot$
        -name: String
        -levels: List<Level>
        -observers: List<ParkingObserver>
        -defaultStrategy: ParkingStrategy
        +getInstance(name, levels, spotsPerLevel, strategy): ParkingLot$
        +getInstance(): ParkingLot$
        +parkVehicle(vehicle): Optional<Ticket>
        +removeVehicle(ticket): Optional<Vehicle>
        +getAvailableSpotsForSize(size): List<ParkingSpot>
        +addObserver(observer): void
        +removeObserver(observer): void
        +displayStatus(): void
        -notifyObservers(): void
    }

    class Level {
        -levelNumber: int
        -parkingSpots: List<ParkingSpot>
        -parkingStrategy: ParkingStrategy
        +Level(levelNumber, totalSpots, strategy)
        +findAvailableSpot(vehicle): Optional<ParkingSpot>
        +parkVehicle(vehicle): Optional<ParkingSpot>
        +removeVehicle(licensePlate): Optional<ParkingSpot>
        +getAvailableSpotsForSize(size): List<ParkingSpot>
        +canAccommodate(vehicle): boolean
    }

    class ParkingSpot {
        -spotId: String
        -levelNumber: int
        -spotNumber: int
        -size: VehicleSize
        -status: SpotStatus
        -parkedVehicle: Vehicle
        -occupiedSince: LocalDateTime
        +ParkingSpot(spotId, levelNumber, spotNumber, size)
        +canAccommodate(vehicle): boolean
        +parkVehicle(vehicle): boolean
        +removeVehicle(): Vehicle
        +isAvailable(): boolean
    }

    %% Vehicle Hierarchy
    class Vehicle {
        <<abstract>>
        -licensePlate: String
        -ownerName: String
        -size: VehicleSize
        +Vehicle(licensePlate, ownerName, size)
        +getLicensePlate(): String
        +getOwnerName(): String
        +getSize(): VehicleSize
        +canFitInSpot(spot): boolean
    }

    class Car {
        +Car(licensePlate, ownerName)
    }

    class Motorcycle {
        +Motorcycle(licensePlate, ownerName)
    }

    class Truck {
        +Truck(licensePlate, ownerName)
    }

    %% Ticket System
    class Ticket {
        -ticketId: String
        -vehicle: Vehicle
        -parkingSpot: ParkingSpot
        -entryTime: LocalDateTime
        -exitTime: LocalDateTime
        +Ticket(vehicle, parkingSpot)
        +getTicketId(): String
        +getVehicle(): Vehicle
        +getParkingSpot(): ParkingSpot
        +markAsExited(): void
        +getParkingDurationMinutes(): long
    }

    class ParkingLotStatus {
        -totalSpots: int
        -availableSpots: int
        +ParkingLotStatus(totalSpots, availableSpots)
        +getTotalSpots(): int
        +getAvailableSpots(): int
        +getOccupancyRate(): double
    }

    %% Display System (Observer Pattern)
    class DisplayBoard {
        -boardName: String
        +DisplayBoard(boardName)
        +display(): void
        +onParkingLotUpdate(status): void
    }

    %% Strategy Pattern
    class ParkingStrategy {
        <<interface>>
        +findSpot(availableSpots): Optional<ParkingSpot>
        +getStrategyName(): String
    }

    class NearestSpotStrategy {
        +findSpot(availableSpots): Optional<ParkingSpot>
        +getStrategyName(): String
    }

    class RandomSpotStrategy {
        +findSpot(availableSpots): Optional<ParkingSpot>
        +getStrategyName(): String
    }

    class BestFitStrategy {
        +findSpot(availableSpots): Optional<ParkingSpot>
        +getStrategyName(): String
    }

    %% Observer Pattern
    class ParkingObserver {
        <<interface>>
        +onParkingLotUpdate(status): void
    }

    %% Enums
    class VehicleSize {
        <<enumeration>>
        MOTORCYCLE
        COMPACT
        REGULAR
        LARGE
        +getSizeValue(): int
        +canAccommodate(vehicleSize): boolean
    }

    class SpotStatus {
        <<enumeration>>
        AVAILABLE
        OCCUPIED
    }

    %% Relationships

    %% Singleton Pattern
    ParkingLot "1" *-- "many" Level : contains

    %% Composition
    Level "1" *-- "many" ParkingSpot : contains

    %% Strategy Pattern
    ParkingLot --> ParkingStrategy : uses
    Level --> ParkingStrategy : uses

    %% Observer Pattern
    ParkingLot ..> ParkingObserver : notifies
    DisplayBoard ..|> ParkingObserver : implements

    %% Vehicle Inheritance
    Vehicle <|-- Car : extends
    Vehicle <|-- Motorcycle : extends
    Vehicle <|-- Truck : extends

    %% Strategy Implementations
    ParkingStrategy <|.. NearestSpotStrategy : implements
    ParkingStrategy <|.. RandomSpotStrategy : implements
    ParkingStrategy <|.. BestFitStrategy : implements

    %% Parking Relationships
    ParkingSpot "1" -- "1" Vehicle : parks
    ParkingSpot "1" -- "1" Ticket : generates
    Vehicle "1" -- "1" Ticket : receives

    %% Status and Display
    ParkingLot "1" -- "1" ParkingLotStatus : has
    ParkingLotStatus "1" --> "*" DisplayBoard : updates

    %% Enums Usage
    ParkingSpot --> VehicleSize : has
    ParkingSpot --> SpotStatus : has
    Vehicle --> VehicleSize : has

    %% Notes
    note for ParkingLot "Singleton Pattern:\nThread-safe implementation\nwith double-checked locking"
    note for Level "Strategy Pattern:\nUses ParkingStrategy for\nspot allocation"
    note for DisplayBoard "Observer Pattern:\nReceives real-time updates\non parking lot status"
    note for Vehicle "Liskov Substitution Principle:\nAll vehicle types can be\nused interchangeably"
