classDiagram
    %% Core Model Classes
    class Post {
        <<abstract>>
        #String id
        #User author
        #String content
        #LocalDateTime createdAt
        #LocalDateTime updatedAt
        #Map~String,VoteType~ userVotes
        #AtomicInteger upvotes
        #AtomicInteger downvotes
        #List~Comment~ comments
        +addVote(Vote) Vote
        +removeVote(String) boolean
        +getVoteCount() int
        +getUpvotes() int
        +getDownvotes() int
        +addComment(Comment)
        +getComments() List~Comment~
        +updateContent(String)
    }

    class User {
        -String userId
        -String username
        -String email
        -UserRole role
        -int reputation
        -LocalDateTime createdAt
        -List~Question~ questions
        -List~Answer~ answers
        -List~Comment~ comments
        +addReputation(int)
        +addQuestion(Question)
        +addAnswer(Answer)
        +addComment(Comment)
    }

    class Question {
        -String title
        -QuestionStatus status
        -AtomicInteger viewCount
        -Set~Tag~ tags
        -List~Answer~ answers
        +updateQuestion(String, String)
        +updateStatus(QuestionStatus)
        +incrementViewCount()
        +addAnswer(Answer)
        +addTag(Tag)
        +getAcceptedAnswer() Optional~Answer~
    }

    class Answer {
        -Question question
        -boolean isAccepted
        +markAsAccepted()
        +unmarkAsAccepted()
    }

    class Comment {
        -String commentId
        -User author
        -String content
        -LocalDateTime createdAt
        -LocalDateTime updatedAt
        +updateContent(String)
    }

    class Vote {
        -String voteId
        -User user
        -VoteType voteType
        -LocalDateTime createdAt
        +changeVote(VoteType)
    }

    class Tag {
        -String tagId
        -String name
        -String description
    }

    %% Enums
    class VoteType {
        <<enumeration>>
        UPVOTE
        DOWNVOTE
        +getValue() int
    }

    class QuestionStatus {
        <<enumeration>>
        OPEN
        CLOSED
        DELETED
        FLAGGED
    }

    class UserRole {
        <<enumeration>>
        ADMIN
        MODERATOR
        MEMBER
        GUEST
    }

    %% Interfaces
    class Votable {
        <<interface>>
        +addVote(Vote) Vote
        +removeVote(String) boolean
        +getVoteCount() int
    }

    class Commentable {
        <<interface>>
        +addComment(Comment)
        +getComments() List~Comment~
    }

    class ReputationStrategy {
        <<interface>>
        +calculateQuestionVoteReputation(VoteType) int
        +calculateAnswerVoteReputation(VoteType) int
        +calculateAcceptedAnswerReputation() int
        +calculateQuestionPostedReputation() int
        +calculateAnswerPostedReputation() int
    }

    class SearchStrategy {
        <<interface>>
        +search(String, List~Question~) List~Question~
    }

    class NotificationObserver {
        <<interface>>
        +onQuestionAnswered(String, String, User)
        +onAnswerAccepted(String, User)
        +onQuestionCommented(String, String, User)
        +onAnswerCommented(String, String, User)
        +onQuestionVoted(String, User)
        +onAnswerVoted(String, User)
    }

    %% Strategy Implementations
    class DefaultReputationStrategy {
        +calculateQuestionVoteReputation(VoteType) int
        +calculateAnswerVoteReputation(VoteType) int
        +calculateAcceptedAnswerReputation() int
    }

    class GenerousReputationStrategy {
        +calculateQuestionVoteReputation(VoteType) int
        +calculateAnswerVoteReputation(VoteType) int
        +calculateAcceptedAnswerReputation() int
    }

    class KeywordSearchStrategy {
        +search(String, List~Question~) List~Question~
    }

    class TagSearchStrategy {
        +search(String, List~Question~) List~Question~
    }

    class UserSearchStrategy {
        +search(String, List~Question~) List~Question~
    }

    class CompositeSearchStrategy {
        -List~SearchStrategy~ strategies
        +search(String, List~Question~) List~Question~
    }

    %% Observer Implementations
    class ConsoleNotificationObserver {
        -User user
        +onQuestionAnswered(String, String, User)
        +onAnswerAccepted(String, User)
    }

    class EmailNotificationObserver {
        -User user
        +onQuestionAnswered(String, String, User)
        +onAnswerAccepted(String, User)
        -sendEmail(String, String)
    }

    %% System
    class StackOverflowSystem {
        <<singleton>>
        -StackOverflowSystem instance
        -Map~String,User~ users
        -Map~String,Question~ questions
        -Map~String,Answer~ answers
        -Map~String,Tag~ tags
        -List~NotificationObserver~ observers
        -ReputationStrategy reputationStrategy
        +getInstance() StackOverflowSystem
        +createUser(String, String, UserRole) User
        +postQuestion(User, String, String, Set~Tag~) Question
        +postAnswer(User, Question, String) Answer
        +voteOnQuestion(User, Question, VoteType)
        +voteOnAnswer(User, Answer, VoteType)
        +commentOnQuestion(User, Question, String) Comment
        +commentOnAnswer(User, Answer, String) Comment
        +acceptAnswer(Answer, User)
        +searchQuestions(String, SearchStrategy) List~Question~
        +registerObserver(NotificationObserver)
        +setReputationStrategy(ReputationStrategy)
    }

    %% Relationships
    User "1" --> "*" Question : posts
    User "1" --> "*" Answer : posts
    User "1" --> "*" Comment : writes
    User --> UserRole

    Post ..|> Votable : implements
    Post ..|> Commentable : implements
    Post --> User : author
    Post "1" --> "*" Comment : has

    Question --|> Post : extends
    Question "1" --> "*" Answer : has
    Question "*" --> "*" Tag : tagged with
    Question --> QuestionStatus

    Answer --|> Post : extends
    Answer --> Question : answers

    Vote --> VoteType
    Vote --> User : by

    Comment --> User : by

    DefaultReputationStrategy ..|> ReputationStrategy : implements
    GenerousReputationStrategy ..|> ReputationStrategy : implements

    KeywordSearchStrategy ..|> SearchStrategy : implements
    TagSearchStrategy ..|> SearchStrategy : implements
    UserSearchStrategy ..|> SearchStrategy : implements
    CompositeSearchStrategy ..|> SearchStrategy : implements
    CompositeSearchStrategy o-- SearchStrategy : contains

    ConsoleNotificationObserver ..|> NotificationObserver : implements
    EmailNotificationObserver ..|> NotificationObserver : implements

    StackOverflowSystem --> User : manages
    StackOverflowSystem --> Question : manages
    StackOverflowSystem --> Answer : manages
    StackOverflowSystem --> Tag : manages
    StackOverflowSystem --> ReputationStrategy : uses
    StackOverflowSystem --> NotificationObserver : notifies

    %% Notes
    note for Post "Template Method Pattern:\nBase class for Question and Answer\nSimplified voting with enums"
    note for StackOverflowSystem "Singleton Pattern: Thread-safe\nwith double-checked locking"
    note for ReputationStrategy "Strategy Pattern: Pluggable\nreputation calculation"
    note for SearchStrategy "Strategy Pattern: Flexible\nsearch algorithms"
    note for NotificationObserver "Observer Pattern: Event\nnotification system"

