```mermaid
classDiagram
    %% State Pattern - Core Design
    class State {
        <<interface>>
        +selectProduct(Product)
        +insertCoin(double)
        +insertCard(String, double)
        +dispenseProduct()
        +cancel()
        +getStateName() String
    }

    class IdleState {
        -VendingMachineContext context
        +selectProduct(Product)
        +insertCoin(double)
        +insertCard(String, double)
        +dispenseProduct()
        +cancel()
        +getStateName() String
    }

    class SelectingState {
        -VendingMachineContext context
        +selectProduct(Product)
        +insertCoin(double)
        +insertCard(String, double)
        +dispenseProduct()
        +cancel()
        +getStateName() String
    }

    class PaymentState {
        -VendingMachineContext context
        +selectProduct(Product)
        +insertCoin(double)
        +insertCard(String, double)
        +dispenseProduct()
        +cancel()
        +getStateName() String
    }

    class DispensingState {
        -VendingMachineContext context
        +selectProduct(Product)
        +insertCoin(double)
        +insertCard(String, double)
        +dispenseProduct()
        +cancel()
        +getStateName() String
    }

    State <|.. IdleState
    State <|.. SelectingState
    State <|.. PaymentState
    State <|.. DispensingState

    %% Context Class
    class VendingMachineContext {
        -State currentState
        -Product selectedProduct
        -double totalPaid
        -boolean isCardPayment
        -Inventory inventory
        -List~VendingMachineObserver~ observers
        -AtomicLong transactionIdCounter
        +setState(State)
        +getCurrentState() State
        +selectProduct(Product)
        +insertCoin(double)
        +insertCard(String, double)
        +dispenseProduct()
        +cancel()
        +registerObserver(VendingMachineObserver)
        +notifyProductDispensed(Product, Transaction)
        +notifyPaymentReceived(double, String)
        +resetTransaction()
    }

    VendingMachineContext --> State : uses
    IdleState --> VendingMachineContext : has reference
    SelectingState --> VendingMachineContext : has reference
    PaymentState --> VendingMachineContext : has reference
    DispensingState --> VendingMachineContext : has reference

    %% Singleton Pattern
    class VendingMachineSystem {
        -static volatile VendingMachineSystem instance
        -VendingMachineContext context
        -Inventory inventory
        -VendingMachineSystem()
        +getInstance()$ VendingMachineSystem
        +addProduct(String, String, double, ProductType, int, int)
        +selectProduct(String)
        +insertCoin(double)
        +insertCard(String, double)
        +cancelTransaction()
        +registerObserver(VendingMachineObserver)
        +displayInventory()
        +getCurrentState() String
    }

    VendingMachineSystem --> VendingMachineContext : contains
    VendingMachineSystem --> Inventory : manages

    %% Model Classes
    class Product {
        -String productId
        -String name
        -double price
        -ProductType type
        -int calories
        +getProductId() String
        +getName() String
        +getPrice() double
        +getType() ProductType
    }

    class Inventory {
        -ConcurrentHashMap~String, Product~ products
        -ConcurrentHashMap~String, AtomicInteger~ stock
        -int lowStockThreshold
        +addProduct(Product, int)
        +getProduct(String) Product
        +getStock(String) int
        +isAvailable(String) boolean
        +isLowStock(String) boolean
        +decrementStock(String) boolean
        +incrementStock(String, int)
    }

    class Transaction {
        -String transactionId
        -Product product
        -double amountPaid
        -double changeReturned
        -PaymentMethod paymentMethod
        -LocalDateTime timestamp
        -TransactionStatus status
        +setStatus(TransactionStatus)
        +getTransactionId() String
        +getProduct() Product
        +getAmountPaid() double
    }

    Inventory --> Product : manages
    Transaction --> Product : references
    VendingMachineContext --> Transaction : creates

    %% Strategy Pattern
    class PaymentStrategy {
        <<interface>>
        +processPayment(double) boolean
        +refundPayment(double) boolean
        +getPaymentMethodName() String
    }

    class CashPaymentStrategy {
        -double totalReceived
        +processPayment(double) boolean
        +refundPayment(double) boolean
        +getPaymentMethodName() String
        +getTotalReceived() double
        +reset()
    }

    class CardPaymentStrategy {
        -String lastCardNumber
        -double lastAmount
        +processPayment(double) boolean
        +refundPayment(double) boolean
        +getPaymentMethodName() String
        +setCardNumber(String)
    }

    class MobilePaymentStrategy {
        -String mobileNumber
        -String transactionId
        +processPayment(double) boolean
        +refundPayment(double) boolean
        +getPaymentMethodName() String
        +setMobileNumber(String)
    }

    PaymentStrategy <|.. CashPaymentStrategy
    PaymentStrategy <|.. CardPaymentStrategy
    PaymentStrategy <|.. MobilePaymentStrategy

    %% Observer Pattern
    class VendingMachineObserver {
        <<interface>>
        +onProductDispensed(Product, Transaction)
        +onPaymentReceived(double, String)
        +onProductOutOfStock(Product)
        +onChangeReturned(double)
        +onMaintenanceRequired(String)
    }

    class ConsoleVendingObserver {
        -String observerName
        +onProductDispensed(Product, Transaction)
        +onPaymentReceived(double, String)
        +onProductOutOfStock(Product)
        +onChangeReturned(double)
        +onMaintenanceRequired(String)
    }

    class MaintenanceObserver {
        -List~String~ maintenanceLog
        -List~String~ outOfStockProducts
        -int totalTransactions
        -double totalRevenue
        +onProductDispensed(Product, Transaction)
        +onPaymentReceived(double, String)
        +onProductOutOfStock(Product)
        +onChangeReturned(double)
        +onMaintenanceRequired(String)
        +printMaintenanceReport()
    }

    VendingMachineObserver <|.. ConsoleVendingObserver
    VendingMachineObserver <|.. MaintenanceObserver
    VendingMachineContext --> VendingMachineObserver : notifies

    %% Enums
    class MachineState {
        <<enumeration>>
        IDLE
        SELECTING
        PAYMENT
        DISPENSING
        MAINTENANCE
    }

    class ProductType {
        <<enumeration>>
        BEVERAGE
        SNACK
        CANDY
        FOOD
        OTHER
    }

    class PaymentMethod {
        <<enumeration>>
        CASH
        CARD
        MOBILE
    }

    class TransactionStatus {
        <<enumeration>>
        PENDING
        COMPLETED
        FAILED
        REFUNDED
        CANCELLED
    }

    class CoinType {
        <<enumeration>>
        PENNY
        NICKEL
        DIME
        QUARTER
        DOLLAR
        +getValue() double
    }

    Product --> ProductType : uses
    Transaction --> PaymentMethod : uses
    Transaction --> TransactionStatus : uses

    %% Main Class
    class Main {
        +main(String[])$
    }

    Main --> VendingMachineSystem : uses
    Main --> ConsoleVendingObserver : creates
    Main --> MaintenanceObserver : creates
```

## State Transition Diagram

```mermaid
stateDiagram-v2
    [*] --> IdleState: Initialize
    
    IdleState --> SelectingState: selectProduct()
    IdleState --> IdleState: insertCoin() [rejected]
    IdleState --> IdleState: cancel() [nothing to cancel]
    
    SelectingState --> SelectingState: insertCoin() [insufficient]
    SelectingState --> PaymentState: insertCoin() [payment complete]
    SelectingState --> PaymentState: insertCard() [payment complete]
    SelectingState --> IdleState: cancel() [refund]
    
    PaymentState --> DispensingState: dispenseProduct()
    
    DispensingState --> IdleState: [dispensing complete]
    DispensingState --> IdleState: [error, refund]
    
    note right of IdleState
        Waiting for customer
        Can: select product
        Cannot: insert money, dispense
    end note
    
    note right of SelectingState
        Product selected
        Can: insert money, cancel
        Cannot: select another product
    end note
    
    note right of PaymentState
        Payment received
        Can: dispense
        Cannot: cancel
    end note
    
    note right of DispensingState
        Dispensing product
        Cannot: cancel, add money
        Auto-returns to Idle
    end note
```

## Component Interaction

```mermaid
sequenceDiagram
    actor Customer
    participant System as VendingMachineSystem
    participant Context as VendingMachineContext
    participant IdleState
    participant SelectingState
    participant PaymentState
    participant DispensingState
    participant Inventory
    participant Observer

    Customer->>System: selectProduct("A1")
    System->>Context: selectProduct(product)
    Context->>IdleState: selectProduct(product)
    IdleState->>Inventory: isAvailable("A1")
    Inventory-->>IdleState: true
    IdleState->>Context: setState(SelectingState)
    IdleState-->>Customer: Product selected

    Customer->>System: insertCoin(1.50)
    System->>Context: insertCoin(1.50)
    Context->>SelectingState: insertCoin(1.50)
    SelectingState->>SelectingState: totalPaid >= price?
    SelectingState->>Context: setState(PaymentState)
    SelectingState->>Context: dispenseProduct()
    Context->>PaymentState: dispenseProduct()
    PaymentState->>Context: setState(DispensingState)
    PaymentState->>Context: dispenseProduct()
    
    Context->>DispensingState: dispenseProduct()
    DispensingState->>Inventory: decrementStock("A1")
    DispensingState->>Observer: onProductDispensed(product, transaction)
    DispensingState->>Observer: onPaymentReceived(1.50, "CASH")
    DispensingState->>Context: setState(IdleState)
    DispensingState-->>Customer: Product dispensed
```

## Design Patterns Overview

```mermaid
graph TB
    subgraph "State Pattern (Core)"
        State[State Interface]
        Idle[IdleState]
        Selecting[SelectingState]
        Payment[PaymentState]
        Dispensing[DispensingState]
        Context[VendingMachineContext]
        
        State --> Idle
        State --> Selecting
        State --> Payment
        State --> Dispensing
        Context --> State
    end
    
    subgraph "Singleton Pattern"
        System[VendingMachineSystem]
    end
    
    subgraph "Strategy Pattern"
        PayStrategy[PaymentStrategy Interface]
        Cash[CashPaymentStrategy]
        Card[CardPaymentStrategy]
        Mobile[MobilePaymentStrategy]
        
        PayStrategy --> Cash
        PayStrategy --> Card
        PayStrategy --> Mobile
    end
    
    subgraph "Observer Pattern"
        ObsInterface[VendingMachineObserver]
        Console[ConsoleVendingObserver]
        Maintenance[MaintenanceObserver]
        
        ObsInterface --> Console
        ObsInterface --> Maintenance
    end
    
    System --> Context
    Context --> ObsInterface
    
    style State fill:#ff9999
    style Context fill:#ff9999
    style System fill:#99ccff
    style PayStrategy fill:#99ff99
    style ObsInterface fill:#ffff99
```

